#
JSON /afs/cern.ch/work/h/hsaka/private/LQ3/2012_DataSet_v2/2012JSON/filteredJson/SingleMu__Run2012ABCD_filtered.json
PILEUP_DATA_ROOT_FILE /afs/cern.ch/work/h/hsaka/private/LQ3/2012_DataSet_v2/2012JSON/pileupRoot/SingleMu__Run2012ABCD_filtered_69400_calcMod_true_60.root
PILEUP_MC_TXT_FILE /afs/cern.ch/work/h/hsaka/private/LQ3/2012_DataSet_v2/2012JSON/pileupRoot/MC53X_PileUp_S10.txt
#
#------------------------ Preliminary cut variables and values (cut level -1) here -----------------------------
# This first list of variable names and values are used to pass configurable values to the user code associated 
# to a variable name.
# The user can retrieve the values associated to a variable name via a provided function call
# [e.g. getPreCutValue1("eleFidRegion") and similarly for value2, value3 and value4 ]
# The idea is that the user can use these values to define the list of objects (electrons, jets, etc.) used in 
# analysis. No cut is automatically evaluated on these variables and the cut level must be equal to -1. 
# Variable names must be unique.
#
#VariableName                   value1		value2		value3		value4		level
#------------			------------	-------------	------------	-------------	-----
##produceSkim                     1               -               -               -             -1
##produceReducedSkim            1               -               -               -               -1
##eleFidRegion			2.5		-		-		-		-1	
##jetFidRegion			2.5		-		-		-		-1	
#
#
#--------------------------------- Cuts (level 0,1,2,3 ... n) below --------------------------------------------
# The cut variable names, cut boundaries and histogram binnings are provided here by the user.
# In the event loop of the analysisClass_template.C, the user have to fill each variable with its value using
# a provided function call [ e.g. fillVariableWithValue("nEleFinal", number_of_electrons) ]
# The variable names in the user code has to match the names provided here.
# Variable names must be unique.
# The cut will be declared "passed" if
#    ( minValue1 < VariableName <= maxValue1 ) 
# in case only the first range (minValue1, maxValue1) is provided, 
# otherwise the cut will be declared "passed" if
#    ( minValue1 < VariableName <= maxValue1 )  OR  ( minValue2 < VariableName <= maxValue2 )
# in case even the second range (minValue2, maxValue2) is provided.
# The level of the cut (0,1,2 ... n) is provided by the user and can be used in the code to easily determine if
# groups of same-level cuts have passed or failed.
#
#VariableName         minValue1(<) maxValue1(>=)        minValue2(<)    maxValue2(>=)   level   histoNbinsMinMax  OptionalFlag
#------------         ------------ -------------        ------------    -------------   -----   ----------------  ------------
PassJSON              0             1                    -               -               0       2  -0.5 1.5        SAVE
PassTrig              0             10                   -               -               0       14 -3.5 10.5       SAVE
PassEventFilter       0             1                    -               -               0       2  -0.5 1.5        SAVE
PassAllMuHLTmatching  0             1                    -               -               0       2  -0.5 1.5        SAVE
PassOfflineDilepton   0             1                    -               -               0       2  -0.5 1.5        SAVE
PassOfflineCuts       0             1                    -               -               0       2  -0.5 1.5        SAVE
